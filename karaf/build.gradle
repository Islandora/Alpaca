description = 'Islandora 8 Karaf Provisioning'

dependencies {
    testImplementation "javax.inject:javax.inject:${versions.javaxInject}"
    testImplementation "org.apache.karaf:apache-karaf:${versions.karaf}"
    testImplementation "org.ops4j.pax.exam:pax-exam-container-karaf:${versions.paxExam}"
    testImplementation "org.ops4j.pax.exam:pax-exam-junit4:${versions.paxExam}"
    testImplementation "org.osgi:org.osgi.core:${versions.osgiCore}"

    testRuntimeOnly "org.apache.activemq:activemq-karaf:${versions.activemq}"
    testRuntimeOnly "org.apache.camel.karaf:apache-camel:${versions.camel}"
    testRuntimeOnly "org.fcrepo.camel:fcrepo-camel:${versions.fcrepoCamel}"
    testRuntimeOnly "org.fcrepo.camel:toolbox-features:${versions.fcrepoCamelToolbox}"
    testRuntimeOnly "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    testRuntimeOnly "org.apache.httpcomponents:httpcore-osgi:${versions.httpCoreOsgi}"
    testRuntimeOnly "org.apache.servicemix.bundles:org.apache.servicemix.bundles.xerces:${versions.xercesServiceMix}"
    testRuntimeOnly "org.ow2.asm:asm-commons:${versions.asmCommons}"
    testRuntimeOnly "org.slf4j:slf4j-simple:${versions.slf4j}"

}

processResources {
    outputs.upToDateWhen { false  }
    expand project.properties
}

artifacts {
    archives (file('build/resources/main/features.xml')) {
        classifier 'features'
        type 'xml'
    }
}

task generateDependsFile {
    // In order to fully use org.ops4j.pax.exam.CoreOptions.maven() stuff
    // we need to generate a META-INF/maven/dependencies.properties file
    // just like the generate-depends-file Maven goal from ServiceMix/Karaf
    
    // Stolen from https://github.com/sebersole/hibernate-core/blob/HHH-9699/hibernate-osgi/hibernate-osgi.gradle
    // then modified to work.

    File outputFileDir = project.file( 'build/resources/test/META-INF/maven/' )
    File outputFile = new File( outputFileDir, 'dependencies.properties' )

    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()

        Properties properties = new Properties();

        // first we add our GAV info
        properties.setProperty( "groupId", "${project.group}" );
        properties.setProperty( "artifactId", project.name as String );
        properties.setProperty( "version", "${project.version}" );
        properties.setProperty( "${project.group}/${project.name}/version", "${project.version}" );

        // then for all our root deps
        project.configurations.testRuntimeClasspath.allDependencies.each {
            final String keyBase = it.getGroup() + '/' + it.getName();
            properties.setProperty( "${keyBase}/scope", "compile" )
            properties.setProperty( "${keyBase}/version", it.getVersion() as String )
        }
        // for all our transitive dependencies
        project.configurations.testRuntimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name;
            properties.setProperty( "${keyBase}/scope", "compile" )
            properties.setProperty( "${keyBase}/type", it.extension as String )
            properties.setProperty( "${keyBase}/version", it.moduleVersion.id.version as String )
        }

        FileOutputStream outputStream = new FileOutputStream( outputFile );
        try {
            properties.store( outputStream, "Generated from Gradle for PaxExam testing" )
        }
        finally {
            outputStream.close()
        }
    }
}

tasks.test.dependsOn tasks.generateDependsFile

test {
    systemProperty "project.version", "${project.version}"

    systemProperty "org.ops4j.pax.url.mvn.useFallbackRepositories" ,"false"
    systemProperty "org.ops4j.pax.url.mvn.repositories", "https://repo1.maven.org/maven2@id=central"

    // Uncomment to enable remote debugging of internal Karaf container on port 5005
    //systemProperty "debug.remote", "true"

    // Uncomment to keep the deployed karaf container inside build/exam/<uuid> for debugging.
    //systemProperty "debug.keepExam", "true"

    testLogging {
        // Uncomment the below line while debugging.
        //events 'standard_out', 'standard_error'
        exceptionFormat = 'full'
        displayGranularity = 0
    }
}
