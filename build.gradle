plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply(false)
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

allprojects  {
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'java'

    group = 'ca.islandora.alpaca'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            requireBranch = '2.x'
        }
    }

    afterReleaseBuild.dependsOn uploadArchives
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'pmd'

    java {
        sourceCompatibility(JavaVersion.VERSION_11)
        targetCompatibility(JavaVersion.VERSION_11)
    }

    ext {
        vendor = 'Islandora Foundation'
        homepage = 'http://islandora.ca'
        inceptionYear = '2015'
        docURL = 'https://islandora.github.io/documentation/'
        license = 'MIT'

        versions = [
            activemq: '5.16.0',
            asmCommons: '5.0.3',
            camel: '3.7.6',
            commonsIo: '2.8.0',
            fcrepoCamel: '5.0.0',
            fcrepoCamelToolbox: '5.0.0',
            httpClient: '4.5.13',
            httpCore: '4.4.14',
            jackson: '2.13.0',
            javaxApi: '1.3.2',
            javaxInject: '1',
            javaxJms: '2.0.1',
            jena: '3.17.0',
            jsonSmart: '2.4.7',
            junit4: '4.13.2',
            logback: '1.2.6',
            picocli: '4.6.1',
            slf4j: '1.7.32',
            spring: '5.3.0',
            xerces : '2.4.0'
        ]

        /* OSGi */
        defaultOsgiImports = 'org.osgi.service.blueprint;version="[1,2)",*'
        projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    checkstyle {
        config = resources.text.fromFile("${rootProject.projectDir}/gradle/checkstyle/checkstyle.xml")
        configProperties("checkStyleDir": "${rootProject.projectDir}/gradle/checkstyle")
        toolVersion "7.6.1"
        ignoreFailures false
    }

    license {
        include "**/*.java"
        // Ignore copied Sparql processors and ConditionOnProperty classes from fcrepo-camel and fcrepo-camel-toolbox
        excludes(["**/indexing/triplestore/processors/*.java", "**/support/config/ConditionOnProperty*.java"])
        header rootProject.file('gradle/license/header.txt')
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    pmd {
        toolVersion = '6.21.0'
        // Only run on src/main
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        ruleSets = []
        ruleSetFiles = rootProject.files('gradle/pmd/ruleset.xml')

    }

    publishing {
        repositories {
            def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
            def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            maven {
                url version.endsWith("SNAPSHOT") ? snapshotRepoUrl : releasesRepoUrl
                credentials(PasswordCredentials) {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
        }
        publications {
            maven(MavenPublication) {
                from components.java
                pom {
                    setPackaging('jar')
                    inceptionYear = project.inceptionYear
                    name = 'Islandora :: Alpaca'
                    description = 'Event driven middleware based on Apache Camel that synchronizes a Fedora with Drupal.'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    scm {
                        connection = 'scm:git:git@github.com:Islandora/Alpaca.git'
                        developerConnection = 'scm:git:git@github.com:Islandora/Alpaca.git'
                        url = 'https://github.com/islandora/Alpaca'
                        tag = 'HEAD'
                    }

                    mailingLists {
                        mailingList {
                            name = 'islandora-dev'
                            subscribe = 'islandora-dev+subscribe@googlegroups.com'
                            unsubscribe = 'islandora-dev+unsubscribe@googlegroups.com'
                            post = 'islandora-dev@googlegroups.com'
                            archive = 'https://groups.google.com/d/forum/islandora-dev'
                        }
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/Islandora/documentation/issues'
                    }

                    developers {
                        developer {
                            id = 'dannylamb'
                            name = 'Daniel Lamb'
                            email = 'dlamb @ (domain of organization url)'
                            organization = 'Born Digital'
                            organizationUrl  ='http://born-digital.com'
                            timezone = '-4'
                        }
                        developer {
                            id = 'whikloj'
                            name = 'Jared Whiklo'
                            email = 'jared.whiklo @ (domain of organization url)'
                            organization = ' University of Manitoba'
                            organizationUrl = 'https://umanitoba.ca'
                            timezone = '-5'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                            distribution = 'https://opensource.org/licenses/MIT'
                            comments = 'Copyright (c) 2015 Islandora Foundation'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    tasks.named('test') {
        useJUnit()
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED
                    //TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat
        }
    }

}

task docs(type: Javadoc) {
  source subprojects.collect {project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
  destinationDir = new File(projectDir, "docs/${version}")
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

afterReleaseBuild.dependsOn docs
